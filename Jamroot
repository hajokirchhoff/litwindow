# Most parts of this Jamroot file are
# blatantly copied from the original boost 1.37.0 Jamroot file.
# which is Copyright Vladimir Prus 2002-2006.
# and Copyright Dave Abrahams 2005-2006.
# and Copyright Rene Rivera 2005-2007.
# and Copyright Douglas Gregor 2005.
#
# and Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import generate ;
import modules ;
import set ;
import stage ;
import package ;
import path ;
import common ;
import os ;
import regex ;
import errors ;
import "class" : new ;
import common ;
import sequence ;
import symlink ;

BOOST_BUILD = $(BOOST_ROOT)/tools/build/v2 ;

path-constant LWL_ROOT : . ;

constant LWL_VERSION : 1.0.0 ;
constant LWL_JAMROOT_MODULE : $(__name__) ;

local version-tag = [ MATCH "^([^.]+)[.]([^.]+)[.]([^.]+)" : $(LWL_VERSION) ] ;

constant LWL_VERSION_TAG : $(version-tag:J="_") ;

# Specify the build variants keyed on the build-type.
local default-build,minimal =
    release
    <threading>multi
    <link>shared <link>static
    <runtime-link>shared
    ;
local default-build,complete =
    debug release
    <threading>single <threading>multi
    <link>shared <link>static
    <runtime-link>shared <runtime-link>static
    ;

project litwindow
    : requirements <include>.
    <define>UNICODE;_UNICODE
      # disable auto-linking for all targets here,
      # primarily because it caused troubles with V2
      # <define>LWL_ALL_NO_LIB=1
      # Used to encode variant in target name. See the
      # 'tag' rule below.
      <tag>@$(__name__).tag
      # <conditional>@handle-static-runtime
            
    : usage-requirements <include>.
    : build-dir bin.v2
    : default-build $(default-build)
    ;

# Setup convenient aliases for all libraries.

all-libraries =
    [ MATCH .*libs/(.*)/build/.* : [ glob libs/*/build/Jamfile.v2 ] [ glob libs/*/build/Jamfile ] ]
    ;
    
all-libraries = [ sequence.unique $(all-libraries) ] ;    

for local l in $(all-libraries)
{
    if ! $(l) in test graph serialization
    {
        alias $(l) : libs/$(l)/build//boost_$(l) ;
        explicit $(l) ;
    }
}

alias headers : : : : <include>. ;


# Decides which libraries are to be installed by looking at --with-<library>
# --without-<library> arguments. Returns the list of directories under "libs"
# which must be built at installed.
rule libraries-to-install ( existing-libraries * )
{
   local argv = [ modules.peek : ARGV ] ;
   local with-parameter = [ MATCH --with-(.*) : $(argv) ] ;
   local without-parameter = [ MATCH --without-(.*) : $(argv) ] ;

   # Do some checks
   if $(with-parameter) && $(without-parameter)
   {
       ECHO "error: both --with-<library> and --without-<library> specified" ;
       EXIT ;
   }

   local wrong = [ set.difference $(with-parameter) : $(existing-libraries) ] ;
   if $(wrong)
   {
       ECHO "error: wrong library name '$(wrong[1])' in the --with-<library> option." ;
       EXIT ;
   }
   local wrong = [ set.difference $(without-parameter) : $(existing-libraries) ] ;
   if $(wrong)
   {
       ECHO "error: wrong library name '$(wrong[1])' in the --without-<library> option." ;
       EXIT ;
   }

   if $(with-parameter)
   {
       return [ set.intersection $(existing-libraries) : $(with-parameter) ] ;
   }
   else
   {
       return [ set.difference $(existing-libraries) : $(without-parameter) ] ;
   }
}

# what kind of layout are we doing?
layout = [ MATCH "^--layout=(.*)" : [ modules.peek : ARGV ] ] ;
layout ?= versioned ;
layout-$(layout) = true ;

# possible stage only location
local stage-locate = [ MATCH "^--stagedir=(.*)" : [ modules.peek : ARGV ] ] ;
stage-locate ?= stage ;

path-constant BOOST_STAGE_LOCATE : $(stage-locate) ;


# location of python
# local python-root = [ MATCH "^--with-python-root=(.*)" : [ modules.peek : ARGV ] ] ;
# PYTHON_ROOT ?= $(python-root) ;

# Select the libraries to install.
libraries = [ libraries-to-install $(all-libraries) ] ;

if --show-libraries in [ modules.peek : ARGV ]
{
    ECHO "The following libraries require building:" ;
    for local l in $(libraries)
    {
        ECHO "    - $(l)" ;
    }
    EXIT ;
}

# Custom build ID.
local build-id = [ MATCH "^--buildid=(.*)" : [ modules.peek : ARGV ] ] ;
if $(build-id)
{
    constant BUILD_ID : [ regex.replace $(build-id) "[*\\/:.\"\' ]" "_" ] ;
}

# This rule is called by Boost.Build to determine the name of
# target. We use it to encode build variant, compiler name and
# boost version in the target name
rule tag ( name : type ? : property-set )
{
    if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB
    {
        if $(layout) = versioned
        {
            local result = [ common.format-name
                <base> <toolset> <threading> <runtime> -$(BOOST_VERSION_TAG)
                -$(BUILD_ID)
                : $(name) : $(type) : $(property-set) ] ;
            
            # Optionally add version suffix.
            # On NT, library with version suffix won't be recognized
            # by linkers. On CYGWIN, we get strage duplicate symbol
            # errors when library is generated with version suffix.
            # On OSX, version suffix is not needed -- the linker expets
            # libFoo.1.2.3.dylib format.
            # AIX linkers don't accept version suffixes either.
            # Pgi compilers can't accept library with version suffix
            if $(type) = SHARED_LIB &&
              ( ! ( [ $(property-set).get <target-os> ] in windows cygwin darwin aix ) &&
                ! ( [ $(property-set).get <toolset> ] in pgi ) )
            {
                result = $(result).$(BOOST_VERSION)  ;
            }
            
            return $(result) ;
        }
        else
        {
            return [ common.format-name
                <base> <threading> <runtime> -$(BUILD_ID)
                : $(name) : $(type) : $(property-set) ] ;
        }
    }
}

# Install to system location.

local install-requirements =
    <install-source-root>boost
    ;
if $(layout-versioned)
{
    install-requirements += <install-header-subdir>boost-$(BOOST_VERSION_TAG)/boost ;
}
else
{
    install-requirements += <install-header-subdir>boost ;
}
if [ modules.peek : NT ]
{
    install-requirements += <install-default-prefix>C:/Boost ;
}
else if [ modules.peek : UNIX ]
{
    install-requirements += <install-default-prefix>/usr/local ;
}

local headers =
    # The .SUNWCCh files are present in tr1 include directory and have to be installed,
    # see http://lists.boost.org/Archives/boost/2007/05/121430.php
    [ path.glob-tree $(BOOST_ROOT)/boost : *.hpp *.ipp *.h *.inc *.SUNWCCh : CVS .svn ]
    [ path.glob-tree $(BOOST_ROOT)/boost/compatibility/cpp_c_headers : c* : CVS .svn ] 
    [ path.glob boost/tr1/tr1 : * : bcc32 sun CVS .svn ]
          ;

# Complete install
package.install install-proper
    :   $(install-requirements) <install-no-version-symlinks>on
    :
    :   libs/$(libraries)/build
    :   $(headers)
    ;
explicit install-proper ;

# Install just library.
install stage-proper
    :   libs/$(libraries)/build
    :   <location>$(stage-locate)/lib
        <install-dependencies>on <install-type>LIB 
        <install-no-version-symlinks>on
    ;
explicit stage-proper ;


if $(layout-versioned) 
  && ( [ modules.peek : NT ] || [ modules.peek : UNIX ] )
{
    rule make-unversioned-links ( project name ? : property-set : sources * )
    {
        local result ;
        local filtered ;
        local pattern ;        
        local nt = [ modules.peek : NT ] ;
        
        # Collect the libraries that have the version number in 'filtered'.
        for local s in $(sources)
        {
            local m ;
            if $(nt)
            {
                m = [ MATCH "(.*[.]lib)" : [ $(s).name ] ] ;
            }
            else
            {
                m = [ MATCH "(.*[.]so[.0-9]+)" "(.*[.]dylib)" "(.*[.]a)" : [ $(s).name ] ] ;
            }            
            if $(m)
            {
                filtered += $(s) ;
            }
        }
        
        # Create links without version.
        for local s in $(filtered)
        {
            local name = [ $(s).name ] ;
            local ea = [ $(s).action ] ;
            local ep = [ $(ea).properties ] ;
            local a  = [
              new non-scanning-action $(s) : symlink.ln : $(ep) ] ;
            
            local noversion-file ;
            if $(nt)
            {
                noversion-file = [ MATCH "(.*)-[0-9_]+([.]lib)" : $(name) ] ;
            }
            else
            {
                noversion-file = 
                  [ MATCH "(.*)-[0-9_]+([.]so)[.0-9]*" : $(name) ] 
                  [ MATCH "(.*)-[0-9_]+([.]dylib)" : $(name) ] 
                  [ MATCH "(.*)-[0-9_]+([.]a)" : $(name) ] 
                  [ MATCH "(.*)-[0-9_]+([.]dll[.]a)" : $(name) ] ;
            }
                        
            local new-name = 
               $(noversion-file[1])$(noversion-file[2]) ;
            result += [ new file-target $(new-name) exact : [ $(s).type ] : $(project)
                    : $(a) ] ;

        }
        return $(result) ;
    }    
            
    generate stage-unversioned : stage-proper : 
      <generating-rule>@make-unversioned-links ;
    explicit stage-unversioned ;
    
    generate install-unversioned : install-proper : 
      <generating-rule>@make-unversioned-links ;
    explicit install-unversioned ;
}
else
{
    # Create do-nothing aliases
    alias stage-unversioned ;
    explicit stage-unversioned ;
    alias install-unversioned ;
    explicit install-unversioned ;
}

alias install : install-proper install-unversioned ;
alias stage : stage-proper stage-unversioned ;
explicit install ;
explicit stage ;


# Just build the libraries, don't install them anywhere.
# This is what happens with just "bjam --v2".
alias build_all : libs/$(libraries)/build ;

# This rule should be called from libraries' Jamfiles and will
# create two targets, "install" and "stage", that will install
# or stage that library. The --prefix option is respected, but
# --with and --without options, naturally, are ignored.
#
# - libraries -- list of library targets to install.
rule boost-install ( libraries * )
{
    package.install install
        : <dependency>/boost//install-headers $(install-requirements)
        : # No binaries
        : $(libraries)
        : # No headers, it's handled by the dependency
    ;

    install stage : $(libraries) : <location>$(BOOST_STAGE_LOCATE) ;

    local c = [ project.current ] ;
    local project-module = [ $(c).project-module ] ;
    module $(project-module)
    {
        explicit stage ;
        explicit install ;
    }
}

# Make project ids of all libraries known.
for local l in $(all-libraries)
{
    use-project /boost/$(l) : libs/$(l)/build ;
}
