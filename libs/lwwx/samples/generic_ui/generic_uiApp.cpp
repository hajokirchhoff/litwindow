/* 
 * Copyright 2004, Hajo Kirchhoff - Lit Window Productions, http://www.litwindow.com
 * This file is part of the Lit Window Library. All use of this material - copying
 * in full or part, including in other works, using in non-profit or for-profit work
 * and other uses - is governed by the licence contained in the Lit Window Library 
 * distribution, file LICENCE.TXT
 * $Id: generic_uiApp.cpp,v 1.1.1.1 2006/01/16 14:36:45 Hajo Kirchhoff Exp $
 */
#include "stdwx.h"
#include "generic_uiApp.h"
#include "MyFrame.h"
#include <wx/cmdline.h>

// this sample is currently broken
#define IS_BROKEN

#ifdef IS_BROKEN
#error This sample is currently broken. Please try out 'rssreader' instead.
#endif

/*! file Main application file

    wxVisualSetup (http://www.litwindow.com) generated application file.
    Follow these steps to add functionality:

    1.  Visit all '//TODO:' items and follow the instructions there.
        If you are using Visual Studio .NET, look in the task list.
    2.  Open the resource editor and edit the version resource.
    3.  Try out the application from the command line. Pass /h as a parameter.
 */

    //-----------------------------------------------------------------------------------------------------------//
    // Redefine 'new' to allow debug memory management to print
    // file and line numbers for memory leaks. For details, see
    // http://www.litwindow.com/Knowhow/wxHowto/wxhowto.html
    // NOTE: YOU MUST INCLUDE THIS LINE IN EVERY CPP FILE OF YOUR
    // PROJECT, immediately after the last #include statement.
    // Memory leaks originating in a file without this #define
    // will be printed without file/linenumber information.
#define new DEBUG_NEW

    //-----------------------------------------------------------------------------------------------------------//
void InitXmlResource(); ///< automatically generated by wxrc
bool Cgeneric_uiApp::OnInit()
{
#ifdef IS_BROKEN
    wxMessageBox("Sorry, but this sample is currently broken. Please have a look at the 'RssReader' sample instead.", "This sample does not work!");
    return false;
#endif
    wxXmlResource::Get()->InitAllHandlers();
    InitXmlResource();
    //TODO: fill in proper values
    SetVendorName(wxT("'Your company name'"));
    SetAppName(wxT("'Your application name'"));
    // Commandline parsing is done in wxApp::OnInit()
    if (!Inherited::OnInit())
        return false;

    //TODO: add your own initialization code here.
    MyFrame *theFrame=new MyFrame;
    SetTopWindow(theFrame);
    theFrame->Show();
    return true;
}








    //-----------------------------------------------------------------------------------------------------------//
int Cgeneric_uiApp::OnExit()
{
    //TODO: add your own cleanup code here.
    return Inherited::OnExit();
}

    //-----------------------------------------------------------------------------------------------------------//
    /*
     * This function is called before command line parsing begins.
     * It gives you a chance to add command line switches and options.
     */
void Cgeneric_uiApp::OnInitCmdLine(wxCmdLineParser &parser)
{
    Inherited::OnInitCmdLine(parser);
    static const wxCmdLineEntryDesc cmdLineDesc[] = {
        //TODO: add your own command line switches and options here.
        //      See wxCmdLineParser for details.
        { wxCMD_LINE_SWITCH, wxT("e"), wxT("example"), wxT("example command line option")},
        { wxCMD_LINE_NONE}  //DON'T forget this line!!
    };
    parser.SetDesc(cmdLineDesc);
}

    //-----------------------------------------------------------------------------------------------------------//
    /*
     * This function is called after the command line has been parsed.
     * It gives you the chance to do something with the switches and options.
     */
bool Cgeneric_uiApp::OnCmdLineParsed(wxCmdLineParser &parser)
{
    // Give default processing (-?, --help and --verbose) the chance to do something.
    Inherited::OnCmdLineParsed(parser);
    if (parser.Found(wxT("example"))) {
        // Strings that have to be localized are enclosed in _(). See Internationalization.
        wxMessageBox(_("You have specified -e on the commmand line. The application will exit now."), _("Example command line option"), MB_OK);
        // tell wxWindows to exit right now.
        return false;
    } else {
        // Log a message, but only if --verbose has been set on the command line.
        wxLogVerbose(wxT("Commandline has been parsed. -e was not found."));
    }
    return true;
}

IMPLEMENT_APP(Cgeneric_uiApp)
